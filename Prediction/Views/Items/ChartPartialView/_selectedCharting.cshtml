@model Prediction.Models.ChartManual.ManualChart
@{
    @using Prediction.Models.Chart.Misc;
    var chartItems = Model.DrawChart(Model.SelectedItems);
    var linePlacement = 48;

}
<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.7.2/Chart.bundle.min.js"></script>
<script src="https://code.jquery.com/jquery-3.3.1.min.js"></script>

<!-- Displays errors -->
<div class="form-group">
    @Html.Partial("ChartPartialView/_chartingErrors", Model)
</div>


<div class="box-body">
    <div class="chart-container">
        <canvas id="myChart" style="width:100%; height:400px"></canvas>
    </div>
</div>



<script type="text/javascript">
@if(chartItems.Count() > 0)
{
    <text>
    var originalLineDraw = Chart.controllers.line.prototype.draw;
    Chart.helpers.extend(Chart.controllers.line.prototype, {
        draw: function () {
            originalLineDraw.apply(this, arguments);

            var chart = this.chart;
            var ctx = chart.chart.ctx;

            var index = chart.config.data.lineAtIndex;
            if (index) {
                var xaxis = chart.scales['x-axis-0'];
                var yaxis = chart.scales['y-axis-0'];

                ctx.save();
                ctx.beginPath();
                ctx.moveTo(xaxis.getPixelForValue(undefined, index), yaxis.top);
                ctx.strokeStyle = '#ff0000';
                ctx.lineTo(xaxis.getPixelForValue(undefined, index), yaxis.bottom);
                ctx.stroke();
                ctx.restore();
            }
        }
    });

    var labels =  @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(chartItems[0].LstData.Select(x => x.Date).ToList()));

    var config = {
        type: 'line',
        options: {
            maintainAspectRatio: true,
            responsive: true,
            stacked: false,
            hoverMode: 'index',
        },
        data: {
            labels: labels,
            datasets: [
                @for (int i = 0; i < chartItems.Count(); i++)
                {
                <text>
                {
                    label: "@(chartItems[i].Label)",
                    backgroundColor: ['rgba(@(RGBAColorCollection.Collection[i].R), @(RGBAColorCollection.Collection[i].G), @(RGBAColorCollection.Collection[i].B), 0.1)'],
                    borderColor: ['rgba(@(RGBAColorCollection.Collection[i].R), @(RGBAColorCollection.Collection[i].G), @(RGBAColorCollection.Collection[i].B))'],
                    fill: @(chartItems[i].Fill.ToString().ToLower()),
                    borderWidth: @(chartItems[i].BorderWidth),
                    data: @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(chartItems[i].LstData.Select(x => x.Price).ToList())),
                },
                </text>
                }],
            lineAtIndex: @linePlacement
        }
    };

    var ctx = document.getElementById("myChart").getContext("2d");
    new Chart(ctx, config);
    </text>
}
</script>