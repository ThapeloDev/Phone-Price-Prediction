@model Prediction.View_Models.Hardware_Suggestion.PurchaseSuggestion
@{
    @using Prediction.Models.Chart.Misc;
    var chartItems = Model.DrawChart(Model.Ids);

    ViewData["Title"] = "HardwareCalc";
}

<h1>HardwareCalc</h1>

<div class="col-8 mx-auto ">
    <form asp-action="ChangeSpecs" id="myform">
        <div class="form-group text-center ">
            <div class="row">
                <label>Storage</label>
                <input name="storage" type="number" />
            </div>
            <div class="row">
                <label>Memory Card Reader</label>
                <input name="hasMemoryCardReader" type="checkbox" />
            </div>
            <div class="row">
                <label>Cpu core count</label>
                <input name="cpuCoreCount" type="number" />
            </div>
            <div class="row">
                <label>Cpu speed</label>
                <input name="cpuSpeed" type="number" step="0.01" />
            </div>
            <div class="row">
                <label>ram</label>
                <input name="ram" type="number" />
            </div>
            <div class="row">
                <label>Headphone output</label>
                <input name="headphoneOutput" type="checkbox" />
            </div>
            <div class="row">
                <label>5g capable</label>
                <input name="is5gCapable" type="checkbox" />
            </div>
            <div class="row">
                <label>front camera mgpx</label>
                <input name="frontCameraMgpx" type="number" />
            </div>
            <div class="row">
                <label>back camera mgpx</label>
                <input name="backCameraMgpx" type="number" />
            </div>
            <div class="row">
                <label>rear camera count</label>
                <input name="rearCameraCount" type="number" />
            </div>
            <div class="row">
                <label>exchangable battery</label>
                <input name="exchangableBattery" type="checkbox" />
            </div>
            <div class="row">
                <label>wireless charging</label>
                <input name="wirelessCharging" type="checkbox" />
            </div>
            <div class="row">
                <label>wireless charging</label>
                <input name="fastCharging" type="checkbox" />
            </div>
            <div class="row">
                <label>water resistance</label>
                <input name="waterResistance" type="checkbox" />
            </div>


            <input type="submit" name="Submit" />
        </div>
    </form>
</div>


<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.7.2/Chart.bundle.min.js"></script>
<script src="https://code.jquery.com/jquery-3.3.1.min.js"></script>

@foreach (string s in Model.Errors)
{
    <text>
        <div class="alert">
            <span class="closebtn">&times;</span>
            <strong>Error!</strong> @s
        </div>
    </text>
}

<div class="box-body">
    <div class="chart-container">
        <canvas id="myChart" style="width:100%; height:400px"></canvas>
    </div>
</div>

@if (Model.Ids.Count() > 0 && Model.Ids != null)
{
    <text>
    <nav class="navbar navbar-light bg-light justify-content-center">
        <form class="form-inline">
            @foreach (int i in Model.Ids)
            {
                string currentBrand = Model.Hardware.FirstOrDefault(m => m.ConfigId == i).Brand.ToString();
                string currentModel = Model.Hardware.FirstOrDefault(m => m.ConfigId == i).Model;
                <text>
                <a asp-controller="Items" asp-action="Info" asp-route-id="@i" class="btn btn-light" type="button">@currentBrand @currentModel</a>
                </text>
            }
        </form>
    </nav>
    </text>
}


<style>
    .alert {
        padding: 5px;
        background-color: #f44336;
        color: white;
        opacity: 1;
        transition: opacity 0.6s;
        margin-bottom: 15px;
    }

    .closebtn {
        margin-left: 15px;
        color: white;
        font-weight: bold;
        float: right;
        font-size: 22px;
        line-height: 20px;
        cursor: pointer;
        transition: 0.3s;
    }

        .closebtn:hover {
            color: black;
        }
</style>

<script type="text/javascript">
    // Get all elements with class="closebtn"
    var close = document.getElementsByClassName("closebtn");
    var i;

    // Loop through all close buttons
    for (i = 0; i < close.length; i++) {
        // When someone clicks on a close button
        close[i].onclick = function () {

            // Get the parent of <span class="closebtn"> (<div class="alert">)
            var div = this.parentElement;

            // Set the opacity of div to 0 (transparent)
            div.style.opacity = "0";

            // Hide the div after 600ms (the same amount of milliseconds it takes to fade out)
            setTimeout(function () { div.style.display = "none"; }, 600);
        }
    }
</script>

<script type="text/javascript">
@if(chartItems.Count() > 0)
{
    <text>
    var originalLineDraw = Chart.controllers.line.prototype.draw;
    Chart.helpers.extend(Chart.controllers.line.prototype, {
        draw: function () {
            originalLineDraw.apply(this, arguments);

            var chart = this.chart;
            var ctx = chart.chart.ctx;

            var index = chart.config.data.lineAtIndex;
            if (index) {
                var xaxis = chart.scales['x-axis-0'];
                var yaxis = chart.scales['y-axis-0'];

                ctx.save();
                ctx.beginPath();
                ctx.moveTo(xaxis.getPixelForValue(undefined, index), yaxis.top);
                ctx.strokeStyle = '#ff0000';
                ctx.lineTo(xaxis.getPixelForValue(undefined, index), yaxis.bottom);
                ctx.stroke();
                ctx.restore();
            }
        }
    });

    var labels =  @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(chartItems[0].LstData.Select(x => x.Date.Month.ToString() + "/" + x.Date.Year.ToString()).ToList()));

    var config = {
        type: 'line',
        options: {
            maintainAspectRatio: true,
            responsive: true,
            stacked: false,
            hoverMode: 'index',
        },
        data: {
            labels: labels,
            datasets: [
                @for (int i = 0; i < chartItems.Count(); i++)
                {
                <text>
                {
                    label: "@(chartItems[i].Label)",
                    backgroundColor: ['rgba(@(RGBAColorCollection.Collection[i].R), @(RGBAColorCollection.Collection[i].G), @(RGBAColorCollection.Collection[i].B), 0.1)'],
                    borderColor: ['rgba(@(RGBAColorCollection.Collection[i].R), @(RGBAColorCollection.Collection[i].G), @(RGBAColorCollection.Collection[i].B))'],
                    fill: @(chartItems[i].Fill.ToString().ToLower()),
                    borderWidth: @(chartItems[i].BorderWidth),
                    data: @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(chartItems[i].LstData.Select(x => x.Price).ToList())),
                },
                </text>
                }],
            lineAtIndex: @(chartItems[0].LstData.Count - 12 - 1)
        }
    };

    var ctx = document.getElementById("myChart").getContext("2d");
    new Chart(ctx, config);
    </text>
}
</script>